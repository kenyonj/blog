<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
   <title>Really Busy Wizards</title>
   <link href="/atom.xml" rel="self"/>
   <link href=""/>
   <updated>2014-10-04T10:59:55-04:00</updated>
   <id></id>
   <author>
      <name>Justin Kenyon</name>
      <email>kenyonj@gmail.com</email>
   </author>

   
   <entry>
      <title>Dokku + DigitalOcean = Your very own, cheap, Heroku clone!</title>
      <link href="/dokku-digitalocean-your-very-own-cheap-heroku-clone"/>
      <updated>2014-06-13T10:40:41-04:00</updated>
      <id>/dokku-digitalocean-your-very-own-cheap-heroku-clone</id>
      <content type="html">&lt;p&gt;These days I am learning tons of new information on a daily basis. I am currently a developer apprentice with &lt;a href=&quot;http://thoughtbot.com&quot;&gt;thoughtbot&lt;/a&gt; and one of the benefits of working with such a smart and motivated group of people is that I am constantly pushed to continue learning and developing my own skills.&lt;/p&gt;

&lt;p&gt;One hurdle that I am about to gracefully jump over is setting up my own &amp;quot;heroku-like&amp;quot; clone using &lt;a href=&quot;https://github.com/progrium/dokku&quot;&gt;Dokku&lt;/a&gt; and &lt;a href=&quot;http://digitalocean.com&quot;&gt;DigitalOcean&lt;/a&gt;. I am paying around $5 a month and I am able to push any web app up to my personal server and Dokku will build it and deploy it onto a custom subdomain of my choosing.&lt;/p&gt;

&lt;p&gt;I tried looking for a definitive guide of how to do this and ended up in lots of different places on the web to finally get all the information I needed to complete the process. The goal of this post is to help others that are trying to do the same thing. Here is the compilation of steps that I went through to get it up and running for deploying Rails apps:&lt;/p&gt;

&lt;p&gt;(disclaimer: these are OS X Mavericks specific directions. If you are on another system, YMMV.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sign up for an account at &lt;a href=&quot;https://www.digitalocean.com/?refcode=a0f9fff0e285&quot;&gt;DigitalOcean&lt;/a&gt;. (note: this is a referral link, I get credit for referring you to DigitalOcean... Thanks!)
You can use a coupon code for $10 to be added to your account (which is basically 2 months free) by searching google for: &lt;code&gt;DigitalOcean Promo Code&lt;/code&gt;. Once you have this code, you can add it to your account on the billing page:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on Billing&lt;/li&gt;
&lt;li&gt;Click on Manage Payments&lt;/li&gt;
&lt;li&gt;Add the promo code on the bottom of this page&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create an ssh key for your system to share with DigitalOcean for authentication:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open terminal:

&lt;ul&gt;
&lt;li&gt;Type these commands (pressing enter after each &lt;code&gt;command&lt;/code&gt;):

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ssh-keygen -t rsa&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;enter&lt;/code&gt; to save it in the default location: &lt;code&gt;~/.ssh/id_rsa&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;enter&lt;/code&gt; to leave the password blank. note: if you want to be super secure, enter a password here and you will be asked for that password whenever authenticating using this key.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat ~/.ssh/id_rsa.pub&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Copy the output to your clipboard and continue to the next set of steps&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;On DigitalOcean, click on SSH Keys, then Add SSH Key: 

&lt;ul&gt;
&lt;li&gt;In the top field, give this key a name. This is not significant, just a way to differentiate between SSH Keys.&lt;/li&gt;
&lt;li&gt;Paste what you copied from the output of &lt;code&gt;cat ~/.ssh/id_rsa.pub&lt;/code&gt; in the bottom field. &lt;/li&gt;
&lt;li&gt;Click on CREATE SSH KEY&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;{&lt;1&gt;}&lt;img src=&quot;http://i.imgur.com/YXw5C5R.png&quot; alt=&quot;ssh_key&quot;&gt;&lt;/p&gt;

&lt;h4&gt;Note&lt;/h4&gt;

&lt;p&gt;The above key is totally random and not my real SSH Key. On that note, you should never publish your key since it gives you full root access to the system we are going to build.&lt;/p&gt;

&lt;hr&gt;

&lt;h4&gt;Create your droplet&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Click on &lt;code&gt;Create&lt;/code&gt; to start the creation of a new droplet:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;{&lt;2&gt;}&lt;img src=&quot;http://i.imgur.com/IfYgu56.png&quot; alt=&quot;create_droplet&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Use the screen caps below to guide you through the droplet creation. Underneath the following pictures I will give you notes on some of the fields.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;{&lt;3&gt;}&lt;img src=&quot;http://i.imgur.com/3Xa0Zy8.png&quot; alt=&quot;droplet_1&quot;&gt;
{&lt;4&gt;}&lt;img src=&quot;http://i.imgur.com/QHhy4Yk.png&quot; alt=&quot;droplet_2&quot;&gt;
{&lt;5&gt;}&lt;img src=&quot;http://i.imgur.com/OcEWZmr.png&quot; alt=&quot;droplet_3&quot;&gt;&lt;/p&gt;

&lt;h4&gt;Notes:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;For the hostname field: You will add in your domain name here. This does not have to be registered yet, but you should think about registering something to be able to really customize your deployments. Here you can have the domain &lt;code&gt;appsinspace.com&lt;/code&gt;. This allows you to deploy apps that are accessible through: &lt;code&gt;http://app-name.appsinspace.com&lt;/code&gt;, just like Heroku!&lt;/li&gt;
&lt;li&gt;For the size, you can choose the cheapest option (selected in the screen capture). If you wish to deploy more than 2-3 apps on this server you might run into memory issues (heap size errors during the build process) and need to bump this up to the 1GB of memory option (I have already done this on my droplet).&lt;/li&gt;
&lt;li&gt;Select the region that is closest to you or the users that are going to be accessing your apps.&lt;/li&gt;
&lt;li&gt;For the Select Image section, you will select the &amp;quot;Applications&amp;quot; tab and then &amp;quot;Dokku v0.2.3 on Ubuntu 14.04&amp;quot; (as of this post this is the latest DigitalOcean image, if it changes this guide might be broken.)&lt;/li&gt;
&lt;li&gt;In the Add optional SSH Keys section, click on the SSH key that you added to DigitalOcean earlier.&lt;/li&gt;
&lt;li&gt;Leave the Settings section untouched and click on Create Droplet&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Once your droplet has been created, you will be directed to a page like the one below:
{&lt;6&gt;}&lt;img src=&quot;http://i.imgur.com/0dXrrqm.png&quot; alt=&quot;droplet_settings&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy down the IP address from this screen. I will here on refer to that address  as: &lt;code&gt;&amp;lt;IP-ADDRESS&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Navigate to &lt;code&gt;http://&amp;lt;IP-ADDRESS&amp;gt;&lt;/code&gt; and you should see a screen similar to below:
{&lt;7&gt;}&lt;img src=&quot;http://i.imgur.com/8oR3yiu.png&quot; alt=&quot;dokku_setup&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Notes:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Paste your SSH Key that you created on DigitalOcean into this top box.&lt;/li&gt;
&lt;li&gt;In the Hostname field, you can leave it as an IP address, or change it to your custom domain name that you have registered. &lt;/li&gt;
&lt;li&gt;The option right below the Hostname field can be checked if you wish to use app URLs like &lt;code&gt;thisismyapp.appsinspace.com&lt;/code&gt;, otherwise you can just leave it unchecked and apps will be deployed in the format displayed in the last text field.&lt;/li&gt;
&lt;li&gt;Once you have the options set up, click on &amp;quot;Finish Setup&amp;quot;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;Now that you have the dokku side all finished, there are some maintenance tasks that need to take place on the server that, if not completed, will cause some apps to fail at deployment.

&lt;ul&gt;
&lt;li&gt;Open terminal

&lt;ul&gt;
&lt;li&gt;Type these commands (pressing enter after each &lt;code&gt;command&lt;/code&gt;):

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ssh root@&amp;lt;IP-ADDRESS&amp;gt;&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;these steps will update the dokku deploy step:

&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;these steps will install the dokku postgresql plugin:

&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;these steps will fix the LANG env variable for the docker containers (currently unecessary for rails deployments, but I am currently working on Haskell deployments and this is an issue):

&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Now you are ready to deploy an app!&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Clone this small heroku sample rails app and deploy it using these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git clone git@github.com:heroku/ruby-rails-sample.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd ruby-rails-sample&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bundle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bundle exec rake bootstrap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote add dokku dokku@&amp;lt;IP-ADDRESS&amp;gt;:rails-sample&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push dokku master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You will now see a bunch of deploy buildsteps, similar to what you see when deploying to heroku.&lt;/li&gt;
&lt;li&gt;Once this is complete, you will still not be able to view your app since we have to create the database on the server side, even though this is completed automatically when using Heroku (small price to pay for your own deployment system).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Log into your server, create the database, and rake db:migrate by following these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ssh root@&amp;lt;IP-ADDRESS&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dokku postgresql:create rails-sample&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run -i -t dokku/rails-sample /bin/bash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export HOME=/app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for file in /app/.profile.d/*; do source $file; done&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hash -r&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd /app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RAILS_ENV=production rake db:migrate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exit&lt;/code&gt; - not a duplication error, this will log you our of your ssh session.&lt;/li&gt;
&lt;li&gt;Note: this is quite the process. Hopefully in the future I can wrap this all up in a script that can be run after deployment to make it even more like Heroku.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Done!&lt;/h3&gt;

&lt;p&gt;Now you can navigate to your new web app url, either: &lt;code&gt;http://rails-sample.appsinspace.com&lt;/code&gt;, or something similar, or &lt;code&gt;http://&amp;lt;IP-ADDRESS&amp;gt;:&amp;lt;SPECIFIC-PORT&amp;gt;&lt;/code&gt; (these details can be found at the bottom of the push messages from earlier, in this format:&lt;/p&gt;

&lt;p&gt;{&lt;8&gt;}&lt;img src=&quot;http://i.imgur.com/loKHLrc.png&quot; alt=&quot;deployed_at&quot;&gt;&lt;/p&gt;

&lt;p&gt;I hope that this guide was informative and helpful. It may even save you some money while giving you a dev playground on the cheap.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Really Busy Wizards Podcast</title>
      <link href="/really-busy-wizards-podcast-1"/>
      <updated>2014-05-06T14:40:00-04:00</updated>
      <id>/really-busy-wizards-podcast-1</id>
      <content type="html">&lt;p&gt;Here it is... hot on the heels of podcast #0, we have the first studio quality recording. Hope you enjoy it!&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/148257291&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;
</content>
   </entry>
   
   <entry>
      <title>Podcast #0 is live!</title>
      <link href="/podcast-number-0-is-live"/>
      <updated>2014-05-05T00:00:00-04:00</updated>
      <id>/podcast-number-0-is-live</id>
      <content type="html">&lt;p&gt;Some fellow &lt;a href=&quot;http://thisismetis.com&quot;&gt;Metis&lt;/a&gt; students and I got together and recorded a podcast about our experience so far in the bootcamp and technology in general. The audio quality leaves a lot to be desired, but we hope to have some studio space in the next couple of days for future releases.&lt;/p&gt;

&lt;p&gt;Your hosts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Derek Kaknes - &lt;a href=&quot;http://twitter.com/dkaknes&quot;&gt;@dkaknes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jeremy Salig - &lt;a href=&quot;http://twitter.com/jeremysalig&quot;&gt;@JeremySalig&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Avi Gilligan - &lt;a href=&quot;http://twitter.com/euraldius&quot;&gt;@euraldius&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Justin Kenyon - &lt;a href=&quot;http://twitter.com/kenyonj&quot;&gt;@kenyonj&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Show Topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;plans after metis&lt;/li&gt;
&lt;li&gt;tdd challenges&lt;/li&gt;
&lt;li&gt;new javascript frameworks&lt;/li&gt;
&lt;li&gt;state of the web in modern society, and where that puts us&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Listen to the audio here:
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/148041642&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>I'm back on the market... for the first time...</title>
      <link href="/im-back-on-the-market-dot-dot-dot-for-the-first-time-dot-dot-dot"/>
      <updated>2014-04-28T00:00:00-04:00</updated>
      <id>/im-back-on-the-market-dot-dot-dot-for-the-first-time-dot-dot-dot</id>
      <content type="html">&lt;p&gt;First and foremost, this post is about my career as a software developer... Sorry, ladies and gents, I am &lt;em&gt;very&lt;/em&gt; happily married!&lt;/p&gt;

&lt;p&gt;Professionally speaking, I am super excited to say that we have reached the final stretch in the &lt;a href=&quot;http://thisismetis.com&quot;&gt;Metis&lt;/a&gt; bootcamp where we start exploring the options for where to bring our passionate programming skills. So far, there appears to be a great market here in Boston for Rails developers.&lt;/p&gt;

&lt;p&gt;I am very familiar with interviewing and searching for companies to join from my career in IT. However, this time, I am trying to convince hiring managers to take the chance on me as an investment with an extremely high return potential. Helping me in this endeavor is going to be the extensive work that I have been putting into developing my Rails, CSS/SASS, and Javascript(jQuery) skills. Luckily in this day and age there are tools like Github and LinkedIn to facilitate the introductions and first impressions that you don&amp;#39;t always get to make in person.&lt;/p&gt;

&lt;p&gt;I am continuously adding to my open source contributions list, but one small tool that I have been developing, and am proud of, is my entry into the crowded URL shortener space, &lt;a href=&quot;http://jpk.io&quot;&gt;jpk.io&lt;/a&gt;. This is a tool that I built using Rails and jQuery with styling using &lt;a href=&quot;http://thoughtbot.com&quot;&gt;thoughtbot&lt;/a&gt;&amp;#39;s &lt;a href=&quot;http://bourbon.io&quot;&gt;bourbon&lt;/a&gt; and &lt;a href=&quot;http://neat.bourbon.io&quot;&gt;neat&lt;/a&gt; with SASS. Take a look at my github project page, &lt;a href=&quot;http://github.com/kenyonj/shortenit&quot;&gt;kenyonj/shortenit&lt;/a&gt;, and feel free to fork it and contribute, or give me any pointers.&lt;/p&gt;

&lt;p&gt;Over the next few weeks I will be starting a few more projects including my passion project for the culmination of the bootcamp. This is going to give me a great opportunity to practice my TDD skills, and maybe even use a little Ember.js!&lt;/p&gt;

&lt;p&gt;Stay tuned!
...and if you are hiring and want to get in touch:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.linkedin.com/in/justinpkenyon/&quot;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/kenyonj&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
   </entry>
   
   <entry>
      <title>Sprinting through a marathon.</title>
      <link href="/sprinting-through-a-marathon"/>
      <updated>2014-04-08T00:00:00-04:00</updated>
      <id>/sprinting-through-a-marathon</id>
      <content type="html">&lt;p&gt;This &lt;a href=&quot;http://thisismetis.com&quot;&gt;Metis&lt;/a&gt; bootcamp is a little like sprinting the whole duration of a marathon. I have been really slacking on my blogging, but only because I am constantly and consistently learning, nonstop &lt;strong&gt;every single day&lt;/strong&gt;. Just to give a quick rundown on what I have learned since my last blog post, about 3 weeks ago:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Polymorphism&lt;/li&gt;
&lt;li&gt;Self Referential Associations&lt;/li&gt;
&lt;li&gt;Refactoring&lt;/li&gt;
&lt;li&gt;AJAX&lt;/li&gt;
&lt;li&gt;Tower of Hanoi&lt;/li&gt;
&lt;li&gt;Big O notation&lt;/li&gt;
&lt;li&gt;Ember&lt;/li&gt;
&lt;li&gt;TDD&lt;/li&gt;
&lt;li&gt;Single Responsibility Principle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;#39;s just a small sample (&lt;em&gt;and a randomly populated one&lt;/em&gt;) of the different things that I have been exposed to over the past few weeks thanks to both the awesome curriculum developed by the instructors as well as some extra learning I am doing on the side to help me become extra competitive in the marketplace. Even though we have only been at this for about 6 weeks now, it seems like much longer given we are doing it everyday for 8+ hours.&lt;/p&gt;

&lt;p&gt;Another thing that has really been helping me drive home some of the concepts we are learning about refactoring is a book I am reading. &lt;a href=&quot;http://books.google.com/books/about/Clean_Code.html?id=_i6bDeoCQzsC&quot;&gt;&lt;em&gt;Clean Code&lt;/em&gt; : A Handbook of Agile Software Craftsmanship&lt;/a&gt; by Robert C. Martin. It talks a lot about how you can write better, more maintainable, and more readable code that will make you a vastly more successful developer.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s getting down to the wire. We are past the half way point (this Friday). I am ready for my career as a developer to get started with a great company (TBD), and even more excited to have my learning continue.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>vim, tmux, and dotfiles (a.k.a. Things I barely used 2 months ago)</title>
      <link href="/vim-tmux-and-dotfiles-aka-things-i-barely-used-2-months-ago"/>
      <updated>2014-03-18T00:00:00-04:00</updated>
      <id>/vim-tmux-and-dotfiles-aka-things-i-barely-used-2-months-ago</id>
      <content type="html">&lt;p&gt;I am starting to really feel like a developer with the coding that I am doing on a daily basis. Possibly the biggest contributor to that feeling is my rapidly improving abilities and understanding of some really cool developer tools. &lt;/p&gt;

&lt;p&gt;There are many different editors out there you can use. They will all allow you to write what you need for Ruby and Ruby on Rails apps as well as other languages. For me, I am really happy that I have spent the time to learn &lt;a href=&quot;http://www.vim.org/&quot;&gt;Vim&lt;/a&gt;. I can now fly around in Rails apps with a few keystrokes. With plugins like &lt;a href=&quot;https://github.com/tpope/vim-rails&quot;&gt;rails-vim&lt;/a&gt; from &lt;a href=&quot;http://twitter.com/tpope&quot;&gt;Tim Pope&lt;/a&gt; I can create and work with everything I need to, right inside of Vim, and it makes me &lt;em&gt;super fast&lt;/em&gt;, compared to how I used to work in XYZ editor.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tmux.sourceforge.net/&quot;&gt;tmux&lt;/a&gt; is something that I have heard about in the ramblings of my good friend, who is a *nix admin, for a long time now. I realize now what all the hype is about. At first it might just seem like another program that you need to learn more shortcuts for (it is). But, it is also a tool that can make you very productive. I am able to have my terminal (&lt;a href=&quot;http://iterm2.com&quot;&gt;iTerm 2&lt;/a&gt;, of course, but that&amp;#39;s for another blog post) window split into 3 different sized sections. One where I can be writing my code in Vim, another for running my rails console, and the other one for running my rails server. All only a glance away. Before tmux I was switching tabs and windows, and it became disorganized very fast. &lt;/p&gt;

&lt;p&gt;The final glue that brings these and many other tools together are the dotfiles. These files are used for configuration and customization of many tools and environments on your system. There is a large community of developers that share their dotfiles on github (here are mine: &lt;a href=&quot;http://github.com/kenyonj/dotfiles&quot;&gt;kenyonj/dotfiles&lt;/a&gt;). This has probably been my favorite thing so far. I have been able to use our instructor, &lt;a href=&quot;http://twitter.com/jsteiner&quot;&gt;Josh Steiner&lt;/a&gt;&amp;#39;s &lt;a href=&quot;http://github.com/jsteiner/dotfiles&quot;&gt;dotfiles&lt;/a&gt; and actually contribute back with some more customizations and documentation. This has been teaching me a lot about git pushing and pulling to and from github, merges, pull requests, and countless other things that I know I will be using on a day to day basis in my new career.&lt;/p&gt;

&lt;p&gt;By familiarizing myself with these tools I have not only allowed my learning and performance to accelerate drastically, but I have also bumped up my developer cred for when I am looking for a company to join at the end of the &lt;a href=&quot;http://thisismetis.com&quot;&gt;Metis bootcamp&lt;/a&gt;. The tools you use are as much a part of your resume as the code you write with them.&lt;/p&gt;

&lt;p&gt;Here is an example of all my tools in one screenshot... Beautiful, right?
{&lt;1&gt;}&lt;img src=&quot;http://i.imgur.com/EoJ2gAW.png&quot; alt=&quot;vim-tmux-iterm2&quot;&gt;&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Being able to reach a once unreachable goal.</title>
      <link href="/being-able-to-reach-a-once-unreachable-goal"/>
      <updated>2014-03-11T00:00:00-04:00</updated>
      <id>/being-able-to-reach-a-once-unreachable-goal</id>
      <content type="html">&lt;p&gt;The title of this blog is really sensationalizing my idea. However, I don&amp;#39;t want to discount it too much before explaining my side of the story. About a two months ago I started creating a list of all the different projects I would like to build once I graduated from &lt;a href=&quot;http://thisismetis.com&quot;&gt;Metis&lt;/a&gt;. This was really a list of anything I could think of that sounded interesting that didn&amp;#39;t already exist in the marketplace. Building up to the start of class a couple of weeks ago, my list had about 15(ish) items on it. I quickly learned that I was going to have to narrow that down and eventually select one for my &amp;quot;Passion Project&amp;quot; or &amp;quot;Capstone Project&amp;quot;, which I will start building around week 9, of the 12 week bootcamp. I settled on 1 idea and have really been letting my mind churn on how I am going to accomplish the very daunting task of taking sketches on paper and building a real product. I don&amp;#39;t want to give it away just yet, but stay tuned here for details as the weeks roll by.&lt;/p&gt;

&lt;p&gt;The biggest thing that I have noticed is: I am starting to see exactly how everything is going to fall into place. Even projects that I didn&amp;#39;t pick to be my main project have already been placed in a &amp;quot;I am just going to build these in my spare time anyways&amp;quot; bucket. The possibilites of what I am going to be able to accomplish are really only limited by the amount of time I want to spend on them. Something that I put on the list 2 months ago thinking that I would be able to spend the bulk of my project time on, are now things that I can look at and say, &amp;quot;I can probably tackle that in a day, and take another day or two to make it look nice.&amp;quot;&lt;/p&gt;

&lt;p&gt;This is a great feeling. One of empowerment, confidence, and a little touch of giddiness. I am loving the ideas that I can now come up with because there are no longer those invisible walls that my brain was automatically putting in front of those seemingly unreachable goals.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>The Painful Steps to Amazing 'AHA!' Moments</title>
      <link href="/the-painful-steps-to-amazing-aha-moments"/>
      <updated>2014-03-06T00:00:00-05:00</updated>
      <id>/the-painful-steps-to-amazing-aha-moments</id>
      <content type="html">&lt;p&gt;I have mentioned the intensely sought after &amp;quot;AHA!&amp;quot; moment a few times before. Let me take a few moments to try and explain what that means for the unfamiliar.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;h2&gt;sought&lt;/h2&gt;

&lt;h3&gt;sôt&lt;/h3&gt;

&lt;h4&gt;1. past and past participle of seek.&lt;/h4&gt;

&lt;p&gt;attempt or desire to obtain or achieve (something).
&amp;quot;the new regime sought his extradition&amp;quot;
synonyms:   try to obtain, work toward, be intent on, aim at/for &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This &amp;quot;AHA!&amp;quot; moment that we all are seeking is the fuel for our fire. So far, my experience with Ruby and now Ruby on ~~Rails~~ Sinatra has been filled with these moments. No more powerful of an &amp;quot;AHA!&amp;quot; moment has been achieved than the one I obtained today when working with ActiveRecord. The developers out there reading this (and I include my fellow classmates in that classification) that are familiar with ActiveRecord know exactly what I am driving at. For the uninitiated, here is my 30 second elevator pitch for ActiveRecord:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ActiveRecord&lt;/strong&gt; lets you interact with all different kinds of databases without having to write and express all different kinds of Data-oriented language code (e.g. SQL) inside your eloquent Ruby. So, something like this in Ruby with SQL: &lt;code&gt;galleries = database.exec_params(&amp;quot;SELECT * FROM galleries;&amp;quot;)&lt;/code&gt; can be expressed in Ruby as: &lt;code&gt;gallery = Gallery.all&lt;/code&gt; when using ActiveRecord.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ActiveRecord does so much more that the above and I am looking forward to using it more and more. This is not something that we arrive at on a nice smooth road either, and it brings me to the title of this post. There were lots of painful steps that had to be taken for us to fully appreciate everything that ActiveRecord is doing in the background. Just like anything else in life, your appreciation for it grows exponentially once you learn more about its inner workings and the behind the scenes legwork it takes to get it done.&lt;/p&gt;

&lt;p&gt;Both &lt;a href=&quot;http://twitter.com/halogenandtoast&quot;&gt;Goose&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/josh_steiner&quot;&gt;Steiner&lt;/a&gt; (our instructors for the &lt;a href=&quot;http://thisismetis.com&quot;&gt;Metis&lt;/a&gt; bootcamp) have talked about the need for going through these, sometimes, painful exercises. To write beautiful, eloquent, Ruby using all the great tools that are available to us, &lt;em&gt;and&lt;/em&gt; understand it, you&amp;#39;ve really got to write code that uses the lower level technologies first. &lt;/p&gt;

&lt;p&gt;If I just thought syntax like &lt;code&gt;Gallery.all&lt;/code&gt; and &lt;code&gt;image = Image.new&lt;/code&gt; was using black magic I would never be able to intelligently discuss my code and explain to someone what it does. That is a skill that is very important to me. &lt;/p&gt;

&lt;p&gt;So, for anyone who is thinking of learning a new programming language, or any  new skill: when you get up to that first wall you think is too high to climb over, keep at it, and pretty soon one of those &amp;quot;AHA!&amp;quot; moments is going to give you the boost you need to hop right over.&lt;/p&gt;

&lt;p&gt;Or, for another wall metaphor from &lt;a href=&quot;http://twitter.com/josh_steiner&quot;&gt;Steiner&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Don&amp;#39;t worry if you hit a wall, pretty soon we are going to be running so fast we&amp;#39;ll run right through it.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
   </entry>
   
   <entry>
      <title>What a difference a couple days (and some new skills) makes!</title>
      <link href="/what-a-difference-a-couple-days-and-some-new-skills-makes"/>
      <updated>2014-03-03T00:00:00-05:00</updated>
      <id>/what-a-difference-a-couple-days-and-some-new-skills-makes</id>
      <content type="html">&lt;p&gt;You may remember that just this last Saturday I wrote a &lt;a href=&quot;http://reallybusywizards.com/one-week-in-as-motivated-as-ever/&quot;&gt;blog post&lt;/a&gt; centered around sharing my progress publicly when coding. That day, I felt pretty accomplished because I succeeded in writing a hangman program. However, it really didn&amp;#39;t feel &amp;quot;right&amp;quot; since the code was ugly and really wasn&amp;#39;t as readable as a program written in Ruby should be. So, today I totally rewrote it with another member of my &lt;a href=&quot;http://thisismetis.com&quot;&gt;Metis&lt;/a&gt; cohort. During this exercise I had so many &amp;quot;Aha!&amp;quot; moments that I really feel I have reached a huge milestone in my understanding of Object-oriented programming. One of our instructors, Goose, described that icky feeling you get when writing code that works, but is just not as clean as you want it to be. That perfectly described how I felt about my last commit to my hangman.rb file on Saturday. Everything worked, the game could be played, but it was just plain... ugly! By writing code using OOP it really helps you step back and tackle one issue at a time and allows for complete readability.&lt;/p&gt;

&lt;p&gt;This is, again, further than I have reached in any other programming language and my code is looking clean. &lt;em&gt;And&lt;/em&gt;... I actually understand everything I am doing, which is a huge accomplishment in my mind.&lt;/p&gt;

&lt;p&gt;You can check out my new hangman game here: &lt;a href=&quot;https://github.com/kenyonj/metis-week02/blob/master/day01/hangman_oop.rb&quot;&gt;Github: hangman_oop.rb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or, just check out this code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class Hangman
 MAX_GUESSES = 6
attr_reader :word, :guesses

def initialize(word)
    @word = word
    @guesses = []
end

 def play
 display_welcome_message

    until game_over?
     display_status
   ask_for_letter
    end

    display_result
  end

  private

  def display_result
    if winner?
      puts &amp;quot;You win!&amp;quot;
    else
      puts &amp;quot;You lose! The word was #{word.join}.&amp;quot;
    end
  end

  def ask_for_letter
    print &amp;quot;&amp;gt; &amp;quot;
    guesses &amp;lt;&amp;lt; gets.strip.downcase
    guesses.uniq!
  end

  def game_over?
    winner? || loser?
end

  def winner?
    (word - guesses).empty?
  end

  def loser?
    guesses_remaining == 0
  end

  def display_status
    display_turns_remaining
    display_guesses
    display_board
  end

  def display_guesses
    puts guesses.sort.join(&amp;quot; &amp;quot;)
  end

  def display_turns_remaining
    puts &amp;quot;#{guesses_remaining} guesses remaining&amp;quot;
  end

  def display_board
    word.each do |letter|
      if guesses.include? letter
        print &amp;quot;#{letter} &amp;quot;
      else
        print &amp;quot;_ &amp;quot;
      end
    end
    puts
  end

  def guesses_remaining
    MAX_GUESSES - incorrect_guesses
  end

  def incorrect_guesses
    (guesses - word).length
  end

  def display_welcome_message
    puts &amp;quot;Welcome to Hangman!&amp;quot;
  end
end

dictionary = []

file = File.open(&amp;quot;/usr/share/dict/words&amp;quot;, &amp;quot;r&amp;quot;)
dictionary = file.to_a
word = dictionary.sample.strip.split(&amp;quot;&amp;quot;)

game = Hangman.new(word)
game.play
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As fun as this command line Ruby stuff is, I am really looking forward to getting into Ruby on Rails soon!   &lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>One week in... as motivated as ever!</title>
      <link href="/one-week-in-dot-dot-dot-as-motivated-as-ever"/>
      <updated>2014-03-01T00:00:00-05:00</updated>
      <id>/one-week-in-dot-dot-dot-as-motivated-as-ever</id>
      <content type="html">&lt;p&gt;Days 3, 4, and 5 flew by at &lt;a href=&quot;http://thisismetis.com&quot;&gt;Metis&lt;/a&gt;. We worked on new concepts and we were introduced to OOP (Object-oriented Programming). This is usually where I have, in the past with different languages, gotten either frustrated because I didn&amp;#39;t understand, or just got lazy and started copying and pasting, and, therefore, stopped learning. This time, however, everything seems different. I am having more and more &amp;quot;Aha!&amp;quot; moments than ever before. Those moments motivate me more than anything when I am  are struggling to understand certain new concepts. I have hit a couple of walls in the last few days, but have been successful at climbing over each and every one.&lt;/p&gt;

&lt;p&gt;On Friday, we had two great talks by the developers at &lt;a href=&quot;http://thoughtbot.com&quot;&gt;thoughtbot&lt;/a&gt;. Someone asked a great question about using github to show our very rusty, and easily indentifiable as novice, code on public repos in case someone in the future sees how poorly we wrote code. &lt;a href=&quot;http://twitter.com/christoomey&quot;&gt;Chris Toomey&lt;/a&gt;, developer @ thoughtbot, had a great answer. He explained that it is much more valuable to have a history of how you have progressed as a developer in such a short amount of time, than to have no history at all. I was in total agreement. I had already been pushing all my code for week 1 of the bootcamp, and will continue to as the bootcamp progresses. Not only for others to see my progression, but to prove to myself that all these things that seem impossibly difficult to achieve now, will seem like small pebbles in the road 6 months from now.&lt;/p&gt;

&lt;p&gt;In the interest of transparency, here is the short amount of history that I have with a recent hangman game I have been writing. You can see my public github for this code here: &lt;a href=&quot;https://github.com/kenyonj/metis-week01/blob/master/day05/hangman.rb&quot;&gt;hangman.rb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Here was the first commit, definitely not working yet:&lt;/code&gt;
{&lt;1&gt;}&lt;img src=&quot;http://i.imgur.com/pJTLaAG.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Here was the second commit, fixed some stuff, but still really can&amp;#39;t play it&lt;/code&gt;
{&lt;2&gt;}&lt;img src=&quot;http://i.imgur.com/SaA9moA.png&quot; alt=&quot;&quot;&gt;
{&lt;3&gt;}&lt;img src=&quot;http://i.imgur.com/lTZ73xz.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;...And, here is my third commit. The game works and can be played, all that&amp;#39;s left is some refactoring (for another day)&lt;/code&gt;
{&lt;4&gt;}&lt;img src=&quot;http://i.imgur.com/bsIfaan.png&quot; alt=&quot;&quot;&gt;
{&lt;5&gt;}&lt;img src=&quot;http://i.imgur.com/Xr1dIpe.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
   </entry>
   
   <entry>
      <title>Teaching is the best method of learning.</title>
      <link href="/teaching-is-the-best-method-of-learning"/>
      <updated>2014-02-25T00:00:00-05:00</updated>
      <id>/teaching-is-the-best-method-of-learning</id>
      <content type="html">&lt;p&gt;Day 2 of the &lt;a href=&quot;http://thisismetis&quot;&gt;Metis&lt;/a&gt; bootcamp has come and gone and today most of us got our first taste of the ruby language. I have dabbled in it before using different online tutorials, such as &lt;a href=&quot;http://www.codecademy.com&quot;&gt;Codecademy&lt;/a&gt;. I have never really taken a problem, spoke about and solved it in everyday english, and then used that to write my code. It is a great way to really drive home those basic concepts that will help build the foundation of what we will be learning over the next 12 weeks.&lt;/p&gt;

&lt;p&gt;Wow, 12 weeks. That seems like so far away. Especially since only after day 2 we have broken a lot of the first week ice that is now allowing us to lean on each other and really collaborate to solve problems. This is a huge concept in Rails: &lt;strong&gt;teamwork&lt;/strong&gt;. I see it everywhere. From meetups and online boards, to resume skills and job postings. I am very glad that this environment that &lt;a href=&quot;http://thoughtbot.com&quot;&gt;thoughtbot&lt;/a&gt; is fostering is encouraging teamwork so heavily. &lt;/p&gt;

&lt;p&gt;I realized over the last 2 days that the best way for me to commit something to memory is to teach it to someone else. Much like creating a unique memory in your mind when trying to learn someones name. If a unique event happens when you learn someone&amp;#39;s name, you are more likely to remember it. The same is true when learning new skills. You can see someone do it, even do it yourself, but you really lay the cement when you explain it to someone else.&lt;/p&gt;

&lt;p&gt;So, in observance of my new found skill, let me teach you how to write your first Ruby program, a simple lottery program:&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll run this in the Interactive Ruby Shell, so open Terminal (on a Mac, for Windows, you&amp;#39;ll have to &lt;a href=&quot;http://rubyinstaller.org/&quot;&gt;download&lt;/a&gt; and install Ruby first, then open a command prompt) and type:
&lt;code&gt;irb&lt;/code&gt; and press &lt;code&gt;ENTER&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should now see a prompt that looks similar to this:
&lt;code&gt;irb(main):001:0&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We are going to start by writing a function. This will allow us to write out all the code, but not execute any of it until we call the function at the end. A function is basically a recipe that you will lookup and use when you need it, but it is stored until such a time.&lt;/p&gt;

&lt;p&gt;After each line of code you will press &lt;code&gt;ENTER&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First, we will define the function:
&lt;code&gt;def lottery&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next, we will we use the &lt;code&gt;puts&lt;/code&gt; method to literally &amp;quot;put&amp;quot; something on the screen for the user to see:
&lt;code&gt;puts &amp;quot;Give me some names, then enter a blank line when you are finished.&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will be followed by our initialization of the variable we will use to store all the names for the lottery. Since it will store multiple names we need to put it inside an array variable. To initialize an array variable all you need to do is assign an empty array to your variable name by typing this:
&lt;code&gt;names = []&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, we need to prompt the user to start entering names. First we will want to show a little prompt symbol, just so it&amp;#39;s clear where they will be typing:
&lt;code&gt;print &amp;quot;&amp;gt; &amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You may have thought, &amp;quot;Why didn&amp;#39;t we use the &lt;code&gt;puts&lt;/code&gt; method?&amp;quot;. Well, &lt;code&gt;puts&lt;/code&gt; will display the message to the user and append a carriage return, or new line, at the end of the message. The &lt;code&gt;print&lt;/code&gt; method displays just what&amp;#39;s inside the quotes and does not automatically append any carriage returns. In this case, we just wanted to show the prompt and allow the user to start typing on the same line.&lt;/p&gt;

&lt;p&gt;Next, we need to tell the program where to store the input from the user. In this case, the initialization and method that takes the input from the keyboard is all going to be accomplished in one line:
&lt;code&gt;name = gets.strip&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So far we have used &lt;code&gt;puts&lt;/code&gt;, &lt;code&gt;print&lt;/code&gt;, and &lt;code&gt;gets&lt;/code&gt;. Are you starting to get the idea that Ruby is very easily readable by humans? One more thing about the above line I would like to explain because we are going to see it again in a few lines. The &lt;code&gt;strip&lt;/code&gt; method, when applied to an object, is going to remove any leading and trailing whitespace. This means that if the user enters &lt;code&gt;SPACE&lt;/code&gt; &lt;code&gt;SPACE&lt;/code&gt; &lt;code&gt;SPACE&lt;/code&gt; &lt;code&gt;SPACE&lt;/code&gt; &lt;code&gt;Kevin&lt;/code&gt; &lt;code&gt;SPACE&lt;/code&gt; &lt;code&gt;SPACE&lt;/code&gt; &lt;code&gt;SPACE&lt;/code&gt;, all the program is going to assign to the &lt;code&gt;name&lt;/code&gt; variable is &lt;code&gt;&amp;quot;Kevin&amp;quot;&lt;/code&gt;. This will allow us to avoid any issues that we might have with blank entries as well.&lt;/p&gt;

&lt;p&gt;We now have 1 name in a &lt;code&gt;name&lt;/code&gt; variable, but we have to get as many names as the user wants to enter and store it in the &lt;code&gt;names&lt;/code&gt; array we created earlier. To accomplish this we will use a loop. Loops in Ruby are also very easy to read and write. Here is the loop we will use:
&lt;code&gt;while name != &amp;quot;&amp;quot; do&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Basically this loop is going to loop through everything following it until the name that the user enters is blank, or &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;. You&amp;#39;ll see later on that we will need to close the loop so that the loop knows where to turn back and start from the beginning.&lt;/p&gt;

&lt;p&gt;Since we already have the first name from the user that we collected before the loop started, we need to assign that to the array. The placement of this command will also be useful for when the loop repeats to complete the same task each time:
&lt;code&gt;names &amp;lt;&amp;lt; name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You see that we are adding &lt;code&gt;name&lt;/code&gt; to the array &lt;code&gt;names&lt;/code&gt; by putting &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; in between. Think of the less-than signs as directional markers and they are adding the value on the right to the collection on the left.&lt;/p&gt;

&lt;p&gt;Next, we want to prompt the user for another name. We will use the same work as before:
&lt;code&gt;print &amp;quot;&amp;gt; &amp;quot;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;name = gets.strip&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This brings us to the end of our loop and we need to loop back around so that these entries get recorded, or, if the user entered a blank line, the loop will stop since the loop definition part is no longer true. For us to signal the end of the loop, we need to type:
&lt;code&gt;end&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We now want to pick a winner at random and display the result. Guess what? It&amp;#39;s super easy to do all that in Ruby, and can be accomplished in only 1 line! Here it is:
&lt;code&gt;puts &amp;quot;The lottery winner is #{names.sample}!&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Again, we used the familiar &lt;code&gt;puts&lt;/code&gt; method to display things on the screen. Then, we notified the program that we are going to throw a variable inside of the string by typing in a &lt;code&gt;#{variable}&lt;/code&gt;, and since we wanted to pick a random entry, all we needed to do was run the &lt;code&gt;sample&lt;/code&gt; method on the array that we wanted to pick from. This returns 1 entry in the names array and displays it.&lt;/p&gt;

&lt;p&gt;Now, we can end the function that we just wrote by typing:
&lt;code&gt;end&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should now see the shell display the function you just wrote like this: 
&lt;code&gt;=&amp;gt; :lottery&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, all we need to do is execute the function and test the lottery. To run the function, type:
&lt;code&gt;lottery&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Good luck! Once you are done playing around in the Interactive Ruby Shell you can type either &lt;code&gt;quit&lt;/code&gt;, &lt;code&gt;exit&lt;/code&gt;, or press &lt;code&gt;CTRL+D&lt;/code&gt; to get back to your main terminal prompt. I have listed all the irb commands and my test with the lottery game below for your reference. &lt;/p&gt;

&lt;p&gt;My main reason for doing this is exactly what I said before, the best way you can fully learn and understand something is to explain it to someone else. I am now a pro at Ruby lottery games that are under 15 lines long!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;irb(main):001:0&amp;gt; def lottery  
irb(main):002:1&amp;gt; puts &amp;quot;Give me some names, then enter a blank line when you are finished.&amp;quot;
irb(main):003:1&amp;gt; names = []
irb(main):004:1&amp;gt; print &amp;quot;&amp;gt; &amp;quot;
irb(main):005:1&amp;gt; name = gets.strip
irb(main):006:1&amp;gt; while name != &amp;quot;&amp;quot; do
irb(main):007:2* names &amp;lt;&amp;lt; name
irb(main):008:2&amp;gt; print &amp;quot;&amp;gt; &amp;quot;
irb(main):009:2&amp;gt; name = gets.strip
irb(main):010:2&amp;gt; end
irb(main):011:1&amp;gt; puts &amp;quot;The lottery winner is #{names.sample}!&amp;quot;
irb(main):012:1&amp;gt; end
=&amp;gt; :lottery  
irb(main):013:0&amp;gt; lottery
Give me some names, then enter a blank line when you are finished.
&amp;gt; Justin  
&amp;gt; Nastya  
&amp;gt; Sophia  
&amp;gt; Tanya  
&amp;gt; Natalya  
&amp;gt; Vladimir  
&amp;gt; Kyle  
&amp;gt; Krista  
&amp;gt; Paula  
&amp;gt; Chuck  
&amp;gt; Dima  
&amp;gt; Arseniy  
&amp;gt;  
The lottery winner is Dima!
=&amp;gt; nil  
irb(main):014:0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
   </entry>
   
   <entry>
      <title>I am a software developer.</title>
      <link href="/i-am-a-software-developer"/>
      <updated>2014-02-24T00:00:00-05:00</updated>
      <id>/i-am-a-software-developer</id>
      <content type="html">&lt;p&gt;Today was my first day at the &lt;a href=&quot;http://thisismetis.com&quot;&gt;Metis&lt;/a&gt; bootcamp put on by &lt;a href=&quot;http://thoughtbot.com&quot;&gt;thoughtbot&lt;/a&gt; and Kaplan in Boston. I thought today was as good a day as any to stop identifying myself as someone with a background in IT support and start identifying myself as a software developer.  &lt;/p&gt;

&lt;p&gt;This journey has been a long time coming, and I have even discovered a lot in the months preceeding this kickoff day. One of the most useful things that I have taken away from my introduction into this software development community (specifically the Ruby on Rails community) is that everyone, no matter how many years they have under their belt, is a student of the craft. This fact is particularly comforting to me since I have struggled with identifying myself as a &amp;quot;real developer&amp;quot; and often think that I don&amp;#39;t deserve that title, yet. However, as I meet more and more &amp;quot;real developers&amp;quot;, I realize that they are continuosly learning as well.&lt;/p&gt;

&lt;p&gt;So, as I finish my first day of the inaugural class of Metis, Spring 2014, I will be from now on known as Justin Kenyon, Software Developer [queue trumpets].&lt;/p&gt;
</content>
   </entry>
   
</feed>
